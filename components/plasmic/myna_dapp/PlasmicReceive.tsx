// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6YWbAhS5tQQRFkLE21F4kw
// Component: SDiudT27JW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: FMUrbbttkcp2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_myna_dapp.module.css"; // plasmic-import: 6YWbAhS5tQQRFkLE21F4kw/projectcss
import * as sty from "./PlasmicReceive.module.css"; // plasmic-import: SDiudT27JW/css

export type PlasmicReceive__VariantMembers = {};

export type PlasmicReceive__VariantsArgs = {};
type VariantPropType = keyof PlasmicReceive__VariantsArgs;
export const PlasmicReceive__VariantProps = new Array<VariantPropType>();

export type PlasmicReceive__ArgsType = {};
type ArgPropType = keyof PlasmicReceive__ArgsType;
export const PlasmicReceive__ArgProps = new Array<ArgPropType>();

export type PlasmicReceive__OverridesType = {
  root?: p.Flex<"div">;
  残高?: p.Flex<"div">;
  send2?: p.Flex<"div">;
  send?: p.Flex<"div">;
};

export interface DefaultReceiveProps {
  dataFetches: PlasmicReceive__Fetches;
}

function PlasmicReceive__RenderFunc(props: {
  variants: PlasmicReceive__VariantsArgs;
  args: PlasmicReceive__ArgsType;
  overrides: PlasmicReceive__OverridesType;
  dataFetches?: PlasmicReceive__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        {true ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              defaultcss.all,
              projectcss.root_reset,
              sty.root
            )}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__df5YM)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___3Oq8Z
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "受け取る"
                  : "受け取る"}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox___0Ia5W)}>
              <div className={classNames(defaultcss.all, sty.freeBox__uiNx5)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(defaultcss.all, sty.freeBox___01An7)}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.freeBox___19A0)}
                    >
                      <div
                        data-plasmic-name={"残高"}
                        data-plasmic-override={overrides.残高}
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.残高
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "あなたのQRコード"
                          : "あなたのQRコード"}
                      </div>
                    </div>

                    <div
                      className={classNames(defaultcss.all, sty.freeBox__dpIzh)}
                    >
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img___3YrxO)}
                        role={"img"}
                        src={"/plasmic/myna_dapp/images/qrpng.png"}
                      />
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___6Bo1X
                      )}
                    >
                      {"あなたのアドレス"}
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__a1UcE
                      )}
                    >
                      {"MRSrKUPyDPhfyQQnUJ9VuCHaojigpBqmfw"}
                    </div>
                  </div>
                ) : null}
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__jNwz3)}>
                <div className={classNames(defaultcss.all, sty.freeBox__xkgye)}>
                  <p.PlasmicLink
                    className={classNames(defaultcss.all, sty.link__h6UuX)}
                    component={Link}
                    href={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("/balance" as const)
                        : ("/balance" as const)
                    }
                    platform={"nextjs"}
                  >
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img___3ByPn)}
                      role={"img"}
                      src={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "/plasmic/myna_dapp/images/receivepng.png"
                          : "/plasmic/myna_dapp/images/homepng.png"
                      }
                    />

                    <div
                      data-plasmic-name={"send2"}
                      data-plasmic-override={overrides.send2}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.send2
                      )}
                    >
                      {"ホーム"}
                    </div>
                  </p.PlasmicLink>
                </div>

                <div className={classNames(defaultcss.all, sty.freeBox__uf1Ta)}>
                  <p.PlasmicLink
                    className={classNames(defaultcss.all, sty.link__tumaL)}
                    component={Link}
                    href={"/send" as const}
                    platform={"nextjs"}
                  >
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__saxb0)}
                      role={"img"}
                      src={"/plasmic/myna_dapp/images/sendpng2.png"}
                    />

                    <div
                      data-plasmic-name={"send"}
                      data-plasmic-override={overrides.send}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.send
                      )}
                    >
                      {"送金"}
                    </div>
                  </p.PlasmicLink>
                </div>
              </div>
            </div>
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "残高", "send2", "send"],
  残高: ["残高"],
  send2: ["send2"],
  send: ["send"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  残高: "div";
  send2: "div";
  send: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReceive__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReceive__VariantsArgs;
    args?: PlasmicReceive__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicReceive__Fetches;
  } & Omit<PlasmicReceive__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReceive__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicReceive__ArgProps,
      internalVariantPropNames: PlasmicReceive__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicReceive__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReceive";
  } else {
    func.displayName = `PlasmicReceive.${nodeName}`;
  }
  return func;
}

export const PlasmicReceive = Object.assign(
  // Top-level PlasmicReceive renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    残高: makeNodeComponent("残高"),
    send2: makeNodeComponent("send2"),
    send: makeNodeComponent("send"),

    // Metadata about props expected for PlasmicReceive
    internalVariantProps: PlasmicReceive__VariantProps,
    internalArgProps: PlasmicReceive__ArgProps
  }
);

export default PlasmicReceive;
/* prettier-ignore-end */
