// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6YWbAhS5tQQRFkLE21F4kw
// Component: tVOp-FjEQX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: FMUrbbttkcp2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_myna_dapp.module.css"; // plasmic-import: 6YWbAhS5tQQRFkLE21F4kw/projectcss
import * as sty from "./PlasmicLanding.module.css"; // plasmic-import: tVOp-FjEQX/css

export type PlasmicLanding__VariantMembers = {};

export type PlasmicLanding__VariantsArgs = {};
type VariantPropType = keyof PlasmicLanding__VariantsArgs;
export const PlasmicLanding__VariantProps = new Array<VariantPropType>();

export type PlasmicLanding__ArgsType = {};
type ArgPropType = keyof PlasmicLanding__ArgsType;
export const PlasmicLanding__ArgProps = new Array<ArgPropType>();

export type PlasmicLanding__OverridesType = {
  root?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  個人情報?: p.Flex<"div">;
};

export interface DefaultLandingProps {
  dataFetches: PlasmicLanding__Fetches;
}

function PlasmicLanding__RenderFunc(props: {
  variants: PlasmicLanding__VariantsArgs;
  args: PlasmicLanding__ArgsType;
  overrides: PlasmicLanding__OverridesType;
  dataFetches?: PlasmicLanding__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__aasAw)}>
            <div className={classNames(defaultcss.all, sty.freeBox__pSpAv)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__gykA1
                )}
              >
                {"RAMEN"}
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox___7S0Ew)}>
                <p.PlasmicLink
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.link
                  )}
                  component={Link}
                  href={"/login" as const}
                  platform={"nextjs"}
                >
                  {"マイナンバーカードに接続"}
                </p.PlasmicLink>
              </div>
            </div>
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(defaultcss.all, sty.freeBox__viQl9)}>
              <div className={classNames(defaultcss.all, sty.freeBox__ds45)}>
                <div className={classNames(defaultcss.all, sty.freeBox__wvIdS)}>
                  <div
                    className={classNames(defaultcss.all, sty.freeBox___4X7EK)}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__s6Kcf
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "RAMENとは"
                      : "RAMENとは"}
                  </div>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__bkn1U)}
                  />
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__fo2Dc
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "RAMENは\n暗号通貨初心者向けの\n暗号通貨管理システムです。\nマイナンバーカードだけで\nブロックチェーンを\n扱うことによって、\n既存のウォレットとは異なり\nより簡単に暗号通貨の送受金を\n実現できます。"
                    : "RAMENは暗号通貨初心者向けの\n暗号通貨管理システムです。\nマイナンバーカードだけで\nブロックチェーンを扱うことによって、\n既存のウォレットとは異なり\nより簡単に暗号通貨の送受金を実現できます。"}
                </div>
              </div>
            </div>
          ) : null}

          <div className={classNames(defaultcss.all, sty.freeBox__uqtu5)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__eQUuT
              )}
            >
              {"RAMENの使い方"}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__jas8K)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__zXi6T)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__fHsWi
                    )}
                  >
                    {"①"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__hJjYu
                    )}
                  >
                    {"専用アプリを起動"}
                  </div>

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__aB1X)}
                    role={"img"}
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "/plasmic/myna_dapp/images/image1Png2.png"
                        : "/plasmic/myna_dapp/images/image1Png2.png"
                    }
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__xWtMr
                    )}
                  >
                    {
                      "ページ上部にあるマイナンバーカードに接続をクリックし、専用アプリを起動させます。"
                    }
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__m8Zp)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__iSuLz
                    )}
                  >
                    {"②"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__vgkow
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "マイナンバーカードを接続"
                      : "マイナンバーカードを接続"}
                  </div>

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__ucxnI)}
                    role={"img"}
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "/plasmic/myna_dapp/images/image2Png.png"
                        : "/plasmic/myna_dapp/images/image2Png.png"
                    }
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__sFf8D
                    )}
                  >
                    {
                      "マイナンバーカードを専用アプリを起動したスマートフォンにかざし、RAMENに接続させます。"
                    }
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(defaultcss.all, sty.freeBox___9KcAw)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__afgRt
                    )}
                  >
                    {"③"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__oIada
                    )}
                  >
                    {"ログイン成功"}
                  </div>

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__xe35N)}
                    role={"img"}
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "/plasmic/myna_dapp/images/スクリンショット20210801181534Png.png"
                        : "/plasmic/myna_dapp/images/スクリンショット20210801181534Png.png"
                    }
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__pcDjN
                    )}
                  >
                    {
                      "上の画面になればログイン成功です。マイナンバーカードが正常に接続されました。"
                    }
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__scE8A)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zLyn
                    )}
                  >
                    {"④"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dvjTt
                    )}
                  >
                    {"Ethereumに接続"}
                  </div>

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__rYEmp)}
                    role={"img"}
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "/plasmic/myna_dapp/images/image4Jpg.jpeg"
                        : "/plasmic/myna_dapp/images/image4Jpg.jpeg"
                    }
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___0Ibcb
                    )}
                  >
                    {"Send画面から送金、Receive画面から受金が実際に行えます。"}
                  </div>
                </div>
              ) : null}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__qYaw)}>
            <div className={classNames(defaultcss.all, sty.freeBox__eHo5U)}>
              <div className={classNames(defaultcss.all, sty.freeBox__wbj6R)}>
                <div
                  className={classNames(defaultcss.all, sty.freeBox__ce3Ul)}
                />

                <div
                  data-plasmic-name={"個人情報"}
                  data-plasmic-override={overrides.個人情報}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.個人情報
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "RAMENで\n扱う個人情報"
                    : "RAMENで扱う個人情報"}
                </div>

                <div
                  className={classNames(defaultcss.all, sty.freeBox__iti3)}
                />
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox___4M0Cd)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(defaultcss.all, sty.freeBox___2Vaeu)}
                >
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__uOKn)}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.freeBox__vgpfD)}
                    >
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img__idSty)}
                        role={"img"}
                        src={"/plasmic/myna_dapp/images/check1Png.png"}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__cTgig
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "利用者証明用電子証明書"
                          : "利用者証明用電子証明書"}
                      </div>
                    </div>

                    <div
                      className={classNames(defaultcss.all, sty.freeBox__lkfwJ)}
                    >
                      <img
                        alt={""}
                        className={classNames(defaultcss.img, sty.img___6K9J)}
                        role={"img"}
                        src={"/plasmic/myna_dapp/images/check2Png.png"}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___9AdGk
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "氏名、住所、生年月日、性別"
                          : "氏名、住所、生年月日、性別"}
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link", "個人情報"],
  link: ["link"],
  個人情報: ["個人情報"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
  個人情報: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLanding__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLanding__VariantsArgs;
    args?: PlasmicLanding__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLanding__Fetches;
  } & Omit<PlasmicLanding__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLanding__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLanding__ArgProps,
      internalVariantPropNames: PlasmicLanding__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLanding__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLanding";
  } else {
    func.displayName = `PlasmicLanding.${nodeName}`;
  }
  return func;
}

export const PlasmicLanding = Object.assign(
  // Top-level PlasmicLanding renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    個人情報: makeNodeComponent("個人情報"),

    // Metadata about props expected for PlasmicLanding
    internalVariantProps: PlasmicLanding__VariantProps,
    internalArgProps: PlasmicLanding__ArgProps
  }
);

export default PlasmicLanding;
/* prettier-ignore-end */
