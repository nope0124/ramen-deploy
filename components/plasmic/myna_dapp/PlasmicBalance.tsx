// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 6YWbAhS5tQQRFkLE21F4kw
// Component: AyLRBt0RFN
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: FMUrbbttkcp2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_myna_dapp.module.css"; // plasmic-import: 6YWbAhS5tQQRFkLE21F4kw/projectcss
import * as sty from "./PlasmicBalance.module.css"; // plasmic-import: AyLRBt0RFN/css

export type PlasmicBalance__VariantMembers = {};

export type PlasmicBalance__VariantsArgs = {};
type VariantPropType = keyof PlasmicBalance__VariantsArgs;
export const PlasmicBalance__VariantProps = new Array<VariantPropType>();

export type PlasmicBalance__ArgsType = {};
type ArgPropType = keyof PlasmicBalance__ArgsType;
export const PlasmicBalance__ArgProps = new Array<ArgPropType>();

export type PlasmicBalance__OverridesType = {
  root?: p.Flex<"div">;
  残高?: p.Flex<"div">;
  send2?: p.Flex<"div">;
  send?: p.Flex<"div">;
};

export interface DefaultBalanceProps {
  dataFetches: PlasmicBalance__Fetches;
}

function PlasmicBalance__RenderFunc(props: {
  variants: PlasmicBalance__VariantsArgs;
  args: PlasmicBalance__ArgsType;
  overrides: PlasmicBalance__OverridesType;
  dataFetches?: PlasmicBalance__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(defaultcss.all, sty.freeBox___8Fw6R)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__xnZyz
              )}
            >
              {"ホーム"}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__sz5Qa)}>
            <div className={classNames(defaultcss.all, sty.freeBox__paR1T)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__mqGsj)}>
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__oKGhQ)}
                  >
                    <img
                      alt={""}
                      className={classNames(defaultcss.img, sty.img__u4Jla)}
                      role={"img"}
                      src={"/plasmic/myna_dapp/images/balancepng.png"}
                    />

                    <div
                      data-plasmic-name={"残高"}
                      data-plasmic-override={overrides.残高}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.残高
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "残高"
                        : "残高"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__jjibd
                    )}
                  >
                    {"0 ETH"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__lLtmg
                    )}
                  >
                    {"= 0 JPY"}
                  </div>
                </div>
              ) : null}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__tdIzZ)}>
              <div className={classNames(defaultcss.all, sty.freeBox__z1Mow)}>
                <p.PlasmicLink
                  className={classNames(defaultcss.all, sty.link___2FcEt)}
                  component={Link}
                  href={"/receive" as const}
                  platform={"nextjs"}
                >
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__daAZ)}
                    role={"img"}
                    src={"/plasmic/myna_dapp/images/receivepng.png"}
                  />

                  <div
                    data-plasmic-name={"send2"}
                    data-plasmic-override={overrides.send2}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.send2
                    )}
                  >
                    {"受取"}
                  </div>
                </p.PlasmicLink>
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__qhdk)}>
                <p.PlasmicLink
                  className={classNames(defaultcss.all, sty.link___6P9)}
                  component={Link}
                  href={"/send" as const}
                  platform={"nextjs"}
                >
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__cOfYf)}
                    role={"img"}
                    src={"/plasmic/myna_dapp/images/sendpng2.png"}
                  />

                  <div
                    data-plasmic-name={"send"}
                    data-plasmic-override={overrides.send}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.send
                    )}
                  >
                    {"送金"}
                  </div>
                </p.PlasmicLink>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "残高", "send2", "send"],
  残高: ["残高"],
  send2: ["send2"],
  send: ["send"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  残高: "div";
  send2: "div";
  send: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBalance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBalance__VariantsArgs;
    args?: PlasmicBalance__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicBalance__Fetches;
  } & Omit<PlasmicBalance__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBalance__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBalance__ArgProps,
      internalVariantPropNames: PlasmicBalance__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicBalance__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBalance";
  } else {
    func.displayName = `PlasmicBalance.${nodeName}`;
  }
  return func;
}

export const PlasmicBalance = Object.assign(
  // Top-level PlasmicBalance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    残高: makeNodeComponent("残高"),
    send2: makeNodeComponent("send2"),
    send: makeNodeComponent("send"),

    // Metadata about props expected for PlasmicBalance
    internalVariantProps: PlasmicBalance__VariantProps,
    internalArgProps: PlasmicBalance__ArgProps
  }
);

export default PlasmicBalance;
/* prettier-ignore-end */
